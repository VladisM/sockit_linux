%
%THIS IS A WIZARD GENERATED FILE. DO NOT EDIT THIS FILE!
%
%---------------------------------------------------------------------------------------------------------
%This is a filter with fixed coefficients.
%This Model Only Support Single Channel Input Data.
%Please input:
%data vector: 		stimulation(1:n)

%    This Model Only Support FIR_WIDTH to 51 Bits

%FILTER PARAMETER
%Input Data Type :	Signed Binary
%Input Data Width: 14
%Interpolation Factor: 1
%Decimation Factor: 1
%FIR Width (Full Calculation Width Before Output Width Adjust) :37
%-----------------------------------------------------------------------------------------------------------
%MegaWizard Scaled Coefficient Values

 function  output = fir_mlab(stimulation, bank, output)
 coef_matrix_in= [3231,-3036,-2291,-1934,-1766,-1665,-1561,-1407,-1178,-867,-474,-10,505,1046,1581,2074,2491,2794,2952,2937,2731,2327,1725,941,2,-1047,-2159,-3268,-4308,-5206,-5887,-6281,-6325,-5966,-5165,-3902,-2175,-2,2574,5500,8697,12071,15516,18920,22169,25149,27754,29883,31466,32445,32767,32445,31466,29883,27754,25149,22169,18920,15516,12071,8697,5500,2574,-2,-2175,-3902,-5165,-5966,-6325,-6281,-5887,-5206,-4308,-3268,-2159,-1047,2,941,1725,2327,2731,2937,2952,2794,2491,2074,1581,1046,505,-10,-474,-867,-1178,-1407,-1561,-1665,-1766,-1934,-2291,-3036,3231;-1556,1909,1370,1103,892,633,296,-101,-506,-848,-1054,-1071,-873,-476,61,651,1178,1530,1617,1390,860,96,-775,-1595,-2193,-2424,-2199,-1505,-423,882,2184,3223,3757,3611,2711,1119,-965,-3219,-5231,-6564,-6816,-5693,-3062,1018,6286,12295,18462,24152,28748,31729,32767,31729,28748,24152,18462,12295,6286,1018,-3062,-5693,-6816,-6564,-5231,-3219,-965,1119,2711,3611,3757,3223,2184,882,-423,-1505,-2199,-2424,-2193,-1595,-775,96,860,1390,1617,1530,1178,651,61,-476,-873,-1071,-1054,-848,-506,-101,296,633,892,1103,1370,1909,-1556;-269,253,190,161,147,138,130,117,98,72,39,0,-42,-87,-131,-172,-207,-232,-246,-244,-227,-193,-143,-78,0,87,179,272,359,433,490,523,527,497,430,325,181,0,-214,-458,-724,-1005,-1293,-1576,-1847,-2095,-2312,-2490,-2622,-2703,32767,-2703,-2622,-2490,-2312,-2095,-1847,-1576,-1293,-1005,-724,-458,-214,0,181,325,430,497,527,523,490,433,359,272,179,87,0,-78,-143,-193,-227,-244,-246,-232,-207,-172,-131,-87,-42,0,39,72,98,117,130,138,147,161,190,253,-269;250,-307,-220,-177,-143,-101,-47,16,81,136,169,172,140,76,-9,-104,-189,-246,-259,-223,-138,-15,124,256,352,389,353,242,68,-141,-351,-518,-604,-580,-435,-179,155,517,840,1055,1095,915,492,-163,-1010,-1976,-2967,-3882,-4621,-5100,32767,-5100,-4621,-3882,-2967,-1976,-1010,-163,492,915,1095,1055,840,517,155,-179,-435,-580,-604,-518,-351,-141,68,242,353,389,352,256,124,-15,-138,-223,-259,-246,-189,-104,-9,76,140,172,169,136,81,16,-47,-101,-143,-177,-220,-307,250;-5427,1358,1186,994,752,444,79,-306,-645,-855,-851,-567,22,886,1941,3051,4045,4753,5031,4796,4047,2876,1458,25,-1171,-1911,-2051,-1564,-553,741,1985,2796,2808,1752,-485,-3816,-7940,-12363,-16455,-19540,-20991,-20338,-17345,-12094,-4942,3435,12174,20323,26946,31267,32767,31267,26946,20323,12174,3435,-4942,-12094,-17345,-20338,-20991,-19540,-16455,-12363,-7940,-3816,-485,1752,2808,2796,1985,741,-553,-1564,-2051,-1911,-1171,25,1458,2876,4047,4796,5031,4753,4045,3051,1941,886,22,-567,-851,-855,-645,-306,79,444,752,994,1186,1358,-5427;1016,-963,1641,1239,-311,-1476,-1829,-1546,-930,-305,8,-152,-635,-998,-774,188,1550,2627,2785,1859,306,-1039,-1484,-933,1,368,-476,-2352,-4242,-4832,-3352,-161,3324,5392,5092,2904,566,5,2024,5496,7719,5878,-1120,-11491,-20920,-24426,-18906,-5035,12563,27133,32767,27133,12563,-5035,-18906,-24426,-20920,-11491,-1120,5878,7719,5496,2024,5,566,2904,5092,5392,3324,-161,-3352,-4832,-4242,-2352,-476,368,1,-933,-1484,-1039,306,1859,2785,2627,1550,188,-774,-998,-635,-152,8,-305,-930,-1546,-1829,-1476,-311,1239,1641,-963,1016;554,-138,-121,-101,-76,-45,-8,31,65,87,86,58,-2,-90,-198,-311,-413,-485,-514,-490,-413,-293,-148,-2,119,195,209,159,56,-75,-202,-285,-286,-179,49,389,811,1263,1681,1996,2144,2077,1772,1235,504,-351,-1243,-2076,-2753,-3194,32767,-3194,-2753,-2076,-1243,-351,504,1235,1772,2077,2144,1996,1681,1263,811,389,49,-179,-286,-285,-202,-75,56,159,209,195,119,-2,-148,-293,-413,-490,-514,-485,-413,-311,-198,-90,-2,58,86,87,65,31,-8,-45,-76,-101,-121,-138,554;-184,175,-298,-225,56,268,332,280,169,55,-1,27,115,181,140,-34,-281,-477,-506,-337,-55,188,269,169,0,-66,86,427,770,877,609,29,-604,-979,-925,-527,-102,0,-367,-998,-1402,-1068,203,2087,3800,4437,3434,914,-2282,-4929,32767,-4929,-2282,914,3434,4437,3800,2087,203,-1068,-1402,-998,-367,0,-102,-527,-925,-979,-604,29,609,877,770,427,86,-66,0,169,269,188,-55,-337,-506,-477,-281,-34,140,181,115,27,-1,55,169,280,332,268,56,-225,-298,175,-184];
 INTER_FACTOR  = 1;
 DECI_FACTOR  =  1;
 MSB_RM  = 0;
 MSB_TYPE  = 0;
 LSB_RM  = 0;
 LSB_TYPE  = 0;
 FIR_WIDTH  = 37 + MSB_RM + LSB_RM;
 OUT_WIDTH  = 37 ;  %37
 DATA_WIDTH = 14;
 BANKCOUNT = 8;
 data_type = 1;

  
 % check size of inputs. 
 [DX,DY] = size(stimulation);
 [CX,CY] = size(coef_matrix_in); 
 if (CY ~= DY * INTER_FACTOR) 
    fprintf('WARNING : coef_matrix size and input data size is not match\n'); 
 end 

 %fill coef_matrix to length of data with the latest coef set 
 if (CY < DY * INTER_FACTOR) 
   %for i= CX +1:DY * INTER_FACTOR 
   for i= 1:DY * INTER_FACTOR 
     if (BANKCOUNT > 1)
       coef_matrix(i,:) = coef_matrix_in(bank(i)+1,:); 
     else
       coef_matrix(i,:) = coef_matrix_in(1,:); 
     end
   end 
 end
	  
 % check if input is integer 
       	int_sti=round(stimulation); 
	    T = (int_sti ~= stimulation); 
	    if (max(T)~=0) 
	        fprintf('WARNING : Integer Input Expected: Rounding Fractional Input to Nearest Integer...\n'); 
	    end 
	     
	    %Input overflow check 
	    switch  data_type 
	    case 1 
	        %set max/min for signed 
	        maxdat = 2^(DATA_WIDTH-1)-1; 
	        mindat = -maxdat-1; 
	    case 2 
	        %set max/min for unsigned 
	        maxdat = 2^DATA_WIDTH-1; 
	        mindat = 0; 
	    end 

	    if(data_type == 2)
	    	if(abs(coef_matrix) == coef_matrix)
	    		FIR_WIDTH = FIR_WIDTH +1;
	    	end
	    end

	    %Saturating Input Value 
	    a=find(int_sti>maxdat); 
	    b=find(int_sti<mindat); 
	    if (~isempty(a)|~isempty(b)) 
	 	    fprintf('WARNING : Input Amplitude Exceeds MAXIMUM/MINIMUM allowable values - saturating input values...\n'); 
	            lena = length (a); 
	            lenb = length (b); 
	            for i =1:lena 
	        	    fprintf('%d > %d \n', int_sti(a(i)), maxdat); 
			        int_sti(a(i)) = maxdat; 
		        end 
		    for i =1:lenb 
			    fprintf('%d < %d \n', int_sti(b(i)), mindat); 
			    int_sti(b(i)) = mindat; 
		    end 
	    end 
         
	    % Add interpolation 
   	    inter_sti = zeros(1, INTER_FACTOR * length(int_sti)); 
	    inter_sti(1:INTER_FACTOR:INTER_FACTOR * length(int_sti)) = int_sti; 
 
         
        for i = 1 : DY *INTER_FACTOR 
    	    coef_current = coef_matrix(i,:); 
            output_temp(i) = simp_adaptive (inter_sti, coef_current, i); 
        end 
	% Truncate output 
	len1 = length(output_temp); 
	 
	    switch  LSB_TYPE 
	    case 0 
	        %truncate 
            out_dec = bi_trunc_lsb(output_temp,LSB_RM,FIR_WIDTH); 
	    case 1 
	        %round 
            out_dec = bi_round(output_temp,LSB_RM, FIR_WIDTH); 
	    end 
         
 	    switch  MSB_TYPE 
	    case 0 
	        %truncate 
            out_dec = bi_trunc_msb(out_dec,MSB_RM,FIR_WIDTH-LSB_RM); 
	    case 1 
	        %round 
            out_dec = bi_satu(out_dec,MSB_RM, FIR_WIDTH-LSB_RM); 
	    end 
 	    
    	% choose decimation output in phase=DECI_FACTOR-1  
     	if(DECI_FACTOR == 1) 
     		output = out_dec; 
     	else 
        output = out_dec(1:DECI_FACTOR:len1);

	 	end  
 	       
  	function[output, outindex] = simp_adaptive (int_sti, coef_current, data_index, output) 
	%Simulation is the whole input sequence 
	%coef_current is the current coefficient set 
	%data_index gives the last data to use 
	%outputs are the sum of input and coef multiplication 
	%outindex is the next data_index 
    
	sti_current = zeros(length(coef_current),1); 
	 
	data_length = length(int_sti); 
	 
	%Check data index 
	if (data_index > data_length) 
		fprintf('ERROR: DATA INDEX IS LARGER THAN DATA LENGTH!!!\n'); 
		return; 
	end 
	for i = 1: length(coef_current) 
	   if ((data_index -i+1)>0 & (data_index - i+1)<=data_length) 
	      sti_current(i,1) = int_sti(data_index - i+1); 
	   end 
	end 
	 
	outindex= data_index+1; 
	output = coef_current * sti_current; 
	% end of function simp_adaptive 
 
	function output = bi_round(data_in,LSB_RM,ORI_WIDTH, output) 
	% LSB_RM is the bit to lose in LSB 
	% ORI_WIDTH is the original data width

	data = round (data_in / 2^LSB_RM);

	output = bi_satu(data,0,ORI_WIDTH - LSB_RM); 
	%end of function bi_trunc_lsb 
	 
	function output = bi_trunc_lsb(data_in,LSB_RM,ORI_WIDTH, output) 
	% LSB_RM is the bit to lose in LSB 
	% ORI_WIDTH is the original data width 
	%2's complement system 
	output = bitshift(2^ORI_WIDTH*(data_in<0) + data_in, -LSB_RM) - 2^(ORI_WIDTH-LSB_RM) *(data_in<0); 
	% end of function bi_round 
	 
	function output = bi_trunc_msb(data_in,MSB_RM,ORI_WIDTH, output) 
	% MSB_RM is the bit to lose in LSB 
	% ORI_WIDTH is the original data width 
	%2's complement system 
	data = 2^ORI_WIDTH * (data_in < 0)+ data_in; 
	erase_num = 2^(ORI_WIDTH - MSB_RM) - 1; 
	data = bitand(data, erase_num); 
	output = data - 2^(ORI_WIDTH - MSB_RM)*(bitget(data,ORI_WIDTH - MSB_RM)); 
	%end of bi_trunc_msb 
	 
	function output = bi_satu(data_in,MSB_RM,ORI_WIDTH, output) 
	% MSB_RM is the bit to lose in LSB 
	% ORI_WIDTH is the original data width 
	%2's complement system 
	maxdat = 2^(ORI_WIDTH - MSB_RM - 1)-1; 
	mindat = 2^(ORI_WIDTH - MSB_RM - 1)*(-1); 
	data_in(find(data_in > maxdat)) = maxdat; 
	data_in(find(data_in < mindat)) = mindat; 
	output = data_in; 
	%end of bi_satu  


